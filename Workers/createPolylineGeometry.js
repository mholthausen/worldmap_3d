define(["./when-ad3237a0","./Cartesian2-08065eec","./ArcType-98ec98bf","./arrayRemoveDuplicates-707c233c","./Transforms-1142ce48","./Color-5f48ac7a","./ComponentDatatype-a867ddaa","./Check-be2d5acb","./GeometryAttribute-da891979","./GeometryAttributes-27dc652d","./IndexDatatype-9504f550","./Math-5ca9b250","./PolylinePipeline-05927ee2","./VertexFormat-fc4fc84a","./combine-1510933d","./RuntimeError-767bd866","./WebGLConstants-1c8239cc","./EllipsoidGeodesic-dc284f08","./EllipsoidRhumbLine-4a6ed5de","./IntersectionTests-75083888","./Plane-bb88dd7e"],(function(e,t,r,a,o,n,i,l,s,p,c,d,u,y,m,h,f,C,v,g,_){"use strict";var A=[];function E(a){var o=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).positions,i=a.colors,l=e.defaultValue(a.width,1),s=e.defaultValue(a.colorsPerVertex,!1);this._positions=o,this._colors=i,this._width=l,this._colorsPerVertex=s,this._vertexFormat=y.VertexFormat.clone(e.defaultValue(a.vertexFormat,y.VertexFormat.DEFAULT)),this._arcType=e.defaultValue(a.arcType,r.ArcType.GEODESIC),this._granularity=e.defaultValue(a.granularity,d.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(a.ellipsoid,t.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",o=1+o.length*t.Cartesian3.packedLength,o+=e.defined(i)?1+i.length*n.Color.packedLength:1,this.packedLength=o+t.Ellipsoid.packedLength+y.VertexFormat.packedLength+4}E.pack=function(r,a,o){var i;o=e.defaultValue(o,0);var l=r._positions,s=l.length;for(a[o++]=s,i=0;i<s;++i,o+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[i],a,o);var p=r._colors;for(s=e.defined(p)?p.length:0,a[o++]=s,i=0;i<s;++i,o+=n.Color.packedLength)n.Color.pack(p[i],a,o);return t.Ellipsoid.pack(r._ellipsoid,a,o),o+=t.Ellipsoid.packedLength,y.VertexFormat.pack(r._vertexFormat,a,o),o+=y.VertexFormat.packedLength,a[o++]=r._width,a[o++]=r._colorsPerVertex?1:0,a[o++]=r._arcType,a[o]=r._granularity,a};var P=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),b=new y.VertexFormat,w={positions:void 0,colors:void 0,ellipsoid:P,vertexFormat:b,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};E.unpack=function(r,a,o){a=e.defaultValue(a,0);for(var i=r[a++],l=new Array(i),s=0;s<i;++s,a+=t.Cartesian3.packedLength)l[s]=t.Cartesian3.unpack(r,a);var p=0<(i=r[a++])?new Array(i):void 0;for(s=0;s<i;++s,a+=n.Color.packedLength)p[s]=n.Color.unpack(r,a);var c=t.Ellipsoid.unpack(r,a,P);a+=t.Ellipsoid.packedLength;var d=y.VertexFormat.unpack(r,a,b);a+=y.VertexFormat.packedLength;var u=r[a++],m=1===r[a++],h=r[a++],f=r[a];return e.defined(o)?(o._positions=l,o._colors=p,o._ellipsoid=t.Ellipsoid.clone(c,o._ellipsoid),o._vertexFormat=y.VertexFormat.clone(d,o._vertexFormat),o._width=u,o._colorsPerVertex=m,o._arcType=h,o._granularity=f,o):(w.positions=l,w.colors=p,w.width=u,w.colorsPerVertex=m,w.arcType=h,w.granularity=f,new E(w))};var T=new t.Cartesian3,x=new t.Cartesian3,k=new t.Cartesian3,D=new t.Cartesian3;return E.createGeometry=function(l){var y,m,h=l._width,f=l._vertexFormat,C=l._colors,v=l._colorsPerVertex,g=l._arcType,_=l._granularity,E=l._ellipsoid,P=[],b=a.arrayRemoveDuplicates(l._positions,t.Cartesian3.equalsEpsilon,!1,P);if(e.defined(C)&&0<P.length&&(m=P[y=0],C=C.filter((function(e,t){return(v?t!==m&&(0!==t||1!==m):t+1!==m)||(m=P[++y],!1)}))),!((W=b.length)<2||h<=0)){if(g===r.ArcType.GEODESIC||g===r.ArcType.RHUMB){var w,V=g===r.ArcType.GEODESIC?(w=d.CesiumMath.chordLength(_,E.maximumRadius),u.PolylinePipeline.numberOfPoints):(w=_,u.PolylinePipeline.numberOfPointsRhumbLine),L=u.PolylinePipeline.extractHeights(b,E);if(e.defined(C)){for(var F=1,G=0;G<W-1;++G)F+=V(b[G],b[G+1],w);var O=new Array(F),R=0;for(G=0;G<W-1;++G){var I=b[G],S=b[G+1],B=C[G],U=V(I,S,w);if(v&&G<F)for(var N=function(e,t,r){var a=A;a.length=r;var o=e.red,i=e.green,l=e.blue,s=e.alpha,p=t.red,c=t.green,d=t.blue,u=t.alpha;if(n.Color.equals(e,t)){for(C=0;C<r;C++)a[C]=n.Color.clone(e);return a}for(var y=(p-o)/r,m=(c-i)/r,h=(d-l)/r,f=(u-s)/r,C=0;C<r;C++)a[C]=new n.Color(o+C*y,i+C*m,l+C*h,s+C*f);return a}(B,C[G+1],U),M=N.length,H=0;H<M;++H)O[R++]=N[H];else for(H=0;H<U;++H)O[R++]=n.Color.clone(B)}O[R]=n.Color.clone(C[C.length-1]),C=O,A.length=0}b=g===r.ArcType.GEODESIC?u.PolylinePipeline.generateCartesianArc({positions:b,minDistance:w,ellipsoid:E,height:L}):u.PolylinePipeline.generateCartesianRhumbArc({positions:b,granularity:w,ellipsoid:E,height:L})}E=4*(W=b.length)-4;var W,Y,q,z,J=new Float64Array(3*E),j=new Float64Array(3*E),K=new Float64Array(3*E),Q=new Float32Array(2*E),X=f.st?new Float32Array(2*E):void 0,Z=e.defined(C)?new Uint8Array(4*E):void 0,$=0,ee=0,te=0,re=0;for(H=0;H<W;++H){0===H?(t.Cartesian3.subtract(b[0],b[1],Y=T),t.Cartesian3.add(b[0],Y,Y)):Y=b[H-1],t.Cartesian3.clone(Y,k),t.Cartesian3.clone(b[H],x),H===W-1?(t.Cartesian3.subtract(b[W-1],b[W-2],Y=T),t.Cartesian3.add(b[W-1],Y,Y)):Y=b[H+1],t.Cartesian3.clone(Y,D),e.defined(Z)&&(q=0===H||v?C[H]:C[H-1],H!==W-1&&(z=C[H]));for(var ae=H===W-1?2:4,oe=0===H?2:0;oe<ae;++oe){t.Cartesian3.pack(x,J,$),t.Cartesian3.pack(k,j,$),t.Cartesian3.pack(D,K,$),$+=3;var ne=oe-2<0?-1:1;Q[ee++]=oe%2*2-1,Q[ee++]=ne*h,f.st&&(X[te++]=H/(W-1),X[te++]=Math.max(Q[ee-2],0)),e.defined(Z)&&(Z[re++]=n.Color.floatToByte((ne=oe<2?q:z).red),Z[re++]=n.Color.floatToByte(ne.green),Z[re++]=n.Color.floatToByte(ne.blue),Z[re++]=n.Color.floatToByte(ne.alpha))}}(L=new p.GeometryAttributes).position=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:J}),L.prevPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:j}),L.nextPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:K}),L.expandAndWidth=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:Q}),f.st&&(L.st=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:X})),e.defined(Z)&&(L.color=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:Z,normalize:!0}));var ie=c.IndexDatatype.createTypedArray(E,6*W-6),le=0,se=0,pe=W-1;for(H=0;H<pe;++H)ie[se++]=le,ie[se++]=le+2,ie[se++]=le+1,ie[se++]=le+1,ie[se++]=le+2,ie[se++]=le+3,le+=4;return new s.Geometry({attributes:L,indices:ie,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:o.BoundingSphere.fromPoints(b),geometryType:s.GeometryType.POLYLINES})}},function(r,a){return(r=e.defined(a)?E.unpack(r,a):r)._ellipsoid=t.Ellipsoid.clone(r._ellipsoid),E.createGeometry(r)}}));