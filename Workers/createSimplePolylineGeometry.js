/*! For license information please see createSimplePolylineGeometry.js.LICENSE.txt */
import{a as r}from"./chunk-6ITL4SKA.js";import{a as L}from"./chunk-CXKSXL5C.js";import{a as E}from"./chunk-D6NO7OEC.js";import"./chunk-NXLA2DOI.js";import"./chunk-EOT3UPEC.js";import"./chunk-ZKNXHPHD.js";import"./chunk-W5ZMPE2M.js";import{a as X}from"./chunk-EQ7PMEBC.js";import{a as Q}from"./chunk-FDDSRMXI.js";import{b as j,c as K,d as Y}from"./chunk-YYYI3I6L.js";import{d as W}from"./chunk-YIFABOF6.js";import"./chunk-PQVQONHO.js";import"./chunk-KDW4RGIR.js";import{a as H}from"./chunk-VNDUYYBJ.js";import{a as k,c as b}from"./chunk-V624RX7A.js";import{a as q}from"./chunk-VZ2RFJ3P.js";import"./chunk-RN5GA5QZ.js";import"./chunk-TWC6ISJU.js";import{a as w}from"./chunk-RKPKWH3Z.js";import{a as D}from"./chunk-BIYNNQRQ.js";import{e as u}from"./chunk-ZLUSVROX.js";function Z(e,t,o,a,n,i,l){let s,u=E.numberOfPoints(e,t,n),c=o.red,p=o.green,h=o.blue,f=o.alpha,m=a.red,y=a.green,k=a.blue,g=a.alpha;if(r.equals(o,a)){for(s=0;s<u;s++)i[l++]=r.floatToByte(c),i[l++]=r.floatToByte(p),i[l++]=r.floatToByte(h),i[l++]=r.floatToByte(f);return l}let d=(m-c)/u,T=(y-p)/u,w=(k-h)/u,_=(g-f)/u,B=l;for(s=0;s<u;s++)i[B++]=r.floatToByte(c+s*d),i[B++]=r.floatToByte(p+s*T),i[B++]=r.floatToByte(h+s*w),i[B++]=r.floatToByte(f+s*_);return B}function R(e){let t=(e=w(e,w.EMPTY_OBJECT)).positions,o=e.colors,a=w(e.colorsPerVertex,!1);if(!u(t)||t.length<2)throw new D("At least two positions are required.");if(u(o)&&(a&&o.length<t.length||!a&&o.length<t.length-1))throw new D("colors has an invalid length.");this._positions=t,this._colors=o,this._colorsPerVertex=a,this._arcType=w(e.arcType,L.GEODESIC),this._granularity=w(e.granularity,q.RADIANS_PER_DEGREE),this._ellipsoid=w(e.ellipsoid,b.WGS84),this._workerName="createSimplePolylineGeometry";let n=1+t.length*k.packedLength;n+=u(o)?1+o.length*r.packedLength:1,this.packedLength=n+b.packedLength+3}R.pack=function(e,t,o){if(!u(e))throw new D("value is required");if(!u(t))throw new D("array is required");o=w(o,0);let a,n=e._positions,i=n.length;for(t[o++]=i,a=0;a<i;++a,o+=k.packedLength)k.pack(n[a],t,o);let l=e._colors;for(i=u(l)?l.length:0,t[o++]=i,a=0;a<i;++a,o+=r.packedLength)r.pack(l[a],t,o);return b.pack(e._ellipsoid,t,o),o+=b.packedLength,t[o++]=e._colorsPerVertex?1:0,t[o++]=e._arcType,t[o]=e._granularity,t},R.unpack=function(e,t,o){if(!u(e))throw new D("array is required");t=w(t,0);let a,n=e[t++],i=new Array(n);for(a=0;a<n;++a,t+=k.packedLength)i[a]=k.unpack(e,t);n=e[t++];let l=n>0?new Array(n):void 0;for(a=0;a<n;++a,t+=r.packedLength)l[a]=r.unpack(e,t);let s=b.unpack(e,t);t+=b.packedLength;let c=1===e[t++],p=e[t++],h=e[t];return u(o)?(o._positions=i,o._colors=l,o._ellipsoid=s,o._colorsPerVertex=c,o._arcType=p,o._granularity=h,o):new R({positions:i,colors:l,ellipsoid:s,colorsPerVertex:c,arcType:p,granularity:h})};var F=new Array(2),N=new Array(2),$={positions:F,height:N,ellipsoid:void 0,minDistance:void 0,granularity:void 0};R.createGeometry=function(e){let t,o,a,n,i,l=e._positions,s=e._colors,c=e._colorsPerVertex,p=e._arcType,h=e._granularity,f=e._ellipsoid,m=q.chordLength(h,f.maximumRadius),y=u(s)&&!c,g=l.length,d=0;if(p===L.GEODESIC||p===L.RHUMB){let e,a,c;p===L.GEODESIC?(e=q.chordLength(h,f.maximumRadius),a=E.numberOfPoints,c=E.generateArc):(e=h,a=E.numberOfPointsRhumbLine,c=E.generateRhumbArc);let k=E.extractHeights(l,f),T=$;if(p===L.GEODESIC?T.minDistance=m:T.granularity=h,T.ellipsoid=f,y){let p=0;for(t=0;t<g-1;t++)p+=a(l[t],l[t+1],e)+1;o=new Float64Array(3*p),n=new Uint8Array(4*p),T.positions=F,T.height=N;let h=0;for(t=0;t<g-1;++t){F[0]=l[t],F[1]=l[t+1],N[0]=k[t],N[1]=k[t+1];let e=c(T);if(u(s)){let o=e.length/3;i=s[t];for(let e=0;e<o;++e)n[h++]=r.floatToByte(i.red),n[h++]=r.floatToByte(i.green),n[h++]=r.floatToByte(i.blue),n[h++]=r.floatToByte(i.alpha)}o.set(e,d),d+=e.length}}else if(T.positions=l,T.height=k,o=new Float64Array(c(T)),u(s)){for(n=new Uint8Array(o.length/3*4),t=0;t<g-1;++t)d=Z(l[t],l[t+1],s[t],s[t+1],m,n,d);let e=s[g-1];n[d++]=r.floatToByte(e.red),n[d++]=r.floatToByte(e.green),n[d++]=r.floatToByte(e.blue),n[d++]=r.floatToByte(e.alpha)}}else{a=y?2*g-2:g,o=new Float64Array(3*a),n=u(s)?new Uint8Array(4*a):void 0;let e=0,c=0;for(t=0;t<g;++t){let a=l[t];if(y&&t>0&&(k.pack(a,o,e),e+=3,i=s[t-1],n[c++]=r.floatToByte(i.red),n[c++]=r.floatToByte(i.green),n[c++]=r.floatToByte(i.blue),n[c++]=r.floatToByte(i.alpha)),y&&t===g-1)break;k.pack(a,o,e),e+=3,u(s)&&(i=s[t],n[c++]=r.floatToByte(i.red),n[c++]=r.floatToByte(i.green),n[c++]=r.floatToByte(i.blue),n[c++]=r.floatToByte(i.alpha))}}let T=new Q;T.position=new Y({componentDatatype:H.DOUBLE,componentsPerAttribute:3,values:o}),u(s)&&(T.color=new Y({componentDatatype:H.UNSIGNED_BYTE,componentsPerAttribute:4,values:n,normalize:!0})),a=o.length/3;let w=2*(a-1),_=X.createTypedArray(a,w),B=0;for(t=0;t<a-1;++t)_[B++]=t,_[B++]=t+1;return new K({attributes:T,indices:_,primitiveType:j.LINES,boundingSphere:W.fromPoints(l)})};var J=R;function x(e,r){return u(r)&&(e=J.unpack(e,r)),e._ellipsoid=b.clone(e._ellipsoid),J.createGeometry(e)}var _e=x;export{_e as default};