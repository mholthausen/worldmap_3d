/*! For license information please see createSphereGeometry.js.LICENSE.txt */
import{a as r}from"./chunk-N3VBCSE5.js";import"./chunk-O4MLFQKO.js";import{a as m}from"./chunk-KA7ZX4BQ.js";import"./chunk-PFXLBIMV.js";import"./chunk-PSBTKXXJ.js";import"./chunk-UJOKCDQH.js";import"./chunk-KYREMICR.js";import"./chunk-VBRVI5XI.js";import"./chunk-5ZFOKSDK.js";import{a as s}from"./chunk-7L2LUDC3.js";import"./chunk-77KFIUJG.js";import"./chunk-7W3OTLHS.js";import"./chunk-X52A3GF7.js";import{b as p}from"./chunk-PX3QTMVS.js";import{e as c}from"./chunk-FE4HG5RY.js";function a(t){let i=t.radius??1,e={radii:new s(i,i,i),stackPartitions:t.stackPartitions,slicePartitions:t.slicePartitions,vertexFormat:t.vertexFormat};this._ellipsoidGeometry=new r(e),this._workerName="createSphereGeometry"}a.packedLength=r.packedLength,a.pack=function(t,i,e){return p.typeOf.object("value",t),r.pack(t._ellipsoidGeometry,i,e)};var l=new r,i={radius:void 0,radii:new s,vertexFormat:new m,stackPartitions:void 0,slicePartitions:void 0};a.unpack=function(t,e,o){let n=r.unpack(t,e,l);return i.vertexFormat=m.clone(n._vertexFormat,i.vertexFormat),i.stackPartitions=n._stackPartitions,i.slicePartitions=n._slicePartitions,c(o)?(s.clone(n._radii,i.radii),o._ellipsoidGeometry=new r(i),o):(i.radius=n._radii.x,new a(i))},a.createGeometry=function(t){return r.createGeometry(t._ellipsoidGeometry)};var d=a;function f(r,t){return c(t)&&(r=d.unpack(r,t)),d.createGeometry(r)}var w=f;export{w as default};