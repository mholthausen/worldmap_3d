define(["exports","./GeometryOffsetAttribute-03006e80","./Transforms-1142ce48","./Cartesian2-08065eec","./ComponentDatatype-a867ddaa","./when-ad3237a0","./Check-be2d5acb","./GeometryAttribute-da891979","./GeometryAttributes-27dc652d","./IndexDatatype-9504f550","./Math-5ca9b250"],(function(i,t,e,a,n,r,o,s,m,u,f){"use strict";var d=new a.Cartesian3(1,1,1),l=Math.cos,c=Math.sin;function C(i){i=r.defaultValue(i,r.defaultValue.EMPTY_OBJECT);var t=r.defaultValue(i.radii,d),e=r.defaultValue(i.innerRadii,t),n=r.defaultValue(i.minimumClock,0),o=r.defaultValue(i.maximumClock,f.CesiumMath.TWO_PI),s=r.defaultValue(i.minimumCone,0),m=r.defaultValue(i.maximumCone,f.CesiumMath.PI),u=Math.round(r.defaultValue(i.stackPartitions,10)),l=Math.round(r.defaultValue(i.slicePartitions,8)),c=Math.round(r.defaultValue(i.subdivisions,128));this._radii=a.Cartesian3.clone(t),this._innerRadii=a.Cartesian3.clone(e),this._minimumClock=n,this._maximumClock=o,this._minimumCone=s,this._maximumCone=m,this._stackPartitions=u,this._slicePartitions=l,this._subdivisions=c,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}C.packedLength=2*a.Cartesian3.packedLength+8,C.pack=function(i,t,e){return e=r.defaultValue(e,0),a.Cartesian3.pack(i._radii,t,e),e+=a.Cartesian3.packedLength,a.Cartesian3.pack(i._innerRadii,t,e),e+=a.Cartesian3.packedLength,t[e++]=i._minimumClock,t[e++]=i._maximumClock,t[e++]=i._minimumCone,t[e++]=i._maximumCone,t[e++]=i._stackPartitions,t[e++]=i._slicePartitions,t[e++]=i._subdivisions,t[e]=r.defaultValue(i._offsetAttribute,-1),t};var _=new a.Cartesian3,h=new a.Cartesian3,p={radii:_,innerRadii:h,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};C.unpack=function(i,t,e){t=r.defaultValue(t,0);var n=a.Cartesian3.unpack(i,t,_);t+=a.Cartesian3.packedLength;var o=a.Cartesian3.unpack(i,t,h);t+=a.Cartesian3.packedLength;var s=i[t++],m=i[t++],u=i[t++],f=i[t++],d=i[t++],l=i[t++],c=i[t++];return t=i[t],r.defined(e)?(e._radii=a.Cartesian3.clone(n,e._radii),e._innerRadii=a.Cartesian3.clone(o,e._innerRadii),e._minimumClock=s,e._maximumClock=m,e._minimumCone=u,e._maximumCone=f,e._stackPartitions=d,e._slicePartitions=l,e._subdivisions=c,e._offsetAttribute=-1===t?void 0:t,e):(p.minimumClock=s,p.maximumClock=m,p.minimumCone=u,p.maximumCone=f,p.stackPartitions=d,p.slicePartitions=l,p.subdivisions=c,p.offsetAttribute=-1===t?void 0:t,new C(p))},C.createGeometry=function(i){var o=i._radii;if(!(o.x<=0||o.y<=0||o.z<=0)){var d=i._innerRadii;if(!(d.x<=0||d.y<=0||d.z<=0)){var C=i._minimumClock,_=i._maximumClock,h=i._minimumCone,p=i._maximumCone,y=i._subdivisions,v=a.Ellipsoid.fromCartesian3(o),k=i._slicePartitions+1,b=i._stackPartitions+1;(k=Math.round(k*Math.abs(_-C)/f.CesiumMath.TWO_PI))<2&&(k=2),(b=Math.round(b*Math.abs(p-h)/f.CesiumMath.PI))<2&&(b=2);var A=0,x=1,P=d.x!==o.x||d.y!==o.y||d.z!==o.z,w=!1,M=!1;P&&(x=2,0<h&&(w=!0,A+=k),p<Math.PI&&(M=!0,A+=k));for(var V,g,G=y*x*(b+k),E=new Float64Array(3*G),O=u.IndexDatatype.createTypedArray(G,2*(G+A-(k+b)*x)),D=0,I=new Array(b),T=new Array(b),z=0;z<b;z++)I[z]=c(g=h+z*(p-h)/(b-1)),T[z]=l(g);var L=new Array(y),R=new Array(y);for(z=0;z<y;z++)L[z]=c(V=C+z*(_-C)/(y-1)),R[z]=l(V);for(z=0;z<b;z++)for(B=0;B<y;B++)E[D++]=o.x*I[z]*R[B],E[D++]=o.y*I[z]*L[B],E[D++]=o.z*T[z];if(P)for(z=0;z<b;z++)for(B=0;B<y;B++)E[D++]=d.x*I[z]*R[B],E[D++]=d.y*I[z]*L[B],E[D++]=d.z*T[z];for(I.length=y,T.length=y,z=0;z<y;z++)I[z]=c(g=h+z*(p-h)/(y-1)),T[z]=l(g);for(L.length=k,R.length=k,z=0;z<k;z++)L[z]=c(V=C+z*(_-C)/(k-1)),R[z]=l(V);for(z=0;z<y;z++)for(B=0;B<k;B++)E[D++]=o.x*I[z]*R[B],E[D++]=o.y*I[z]*L[B],E[D++]=o.z*T[z];if(P)for(z=0;z<y;z++)for(B=0;B<k;B++)E[D++]=d.x*I[z]*R[B],E[D++]=d.y*I[z]*L[B],E[D++]=d.z*T[z];for(z=D=0;z<b*x;z++)for(var N=z*y,B=0;B<y-1;B++)O[D++]=N+B,O[D++]=N+B+1;var S=b*y*x;for(z=0;z<k;z++)for(B=0;B<y-1;B++)O[D++]=S+z+B*k,O[D++]=S+z+(B+1)*k;if(P)for(S=b*y*x+k*y,z=0;z<k;z++)for(B=0;B<y-1;B++)O[D++]=S+z+B*k,O[D++]=S+z+(B+1)*k;if(P){var U=b*y*x,F=U+y*k;if(w)for(z=0;z<k;z++)O[D++]=U+z,O[D++]=F+z;if(M)for(U+=y*k-k,F+=y*k-k,z=0;z<k;z++)O[D++]=U+z,O[D++]=F+z}return P=new m.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:E})}),r.defined(i._offsetAttribute)&&(w=E.length,M=new Uint8Array(w/3),w=i._offsetAttribute===t.GeometryOffsetAttribute.NONE?0:1,t.arrayFill(M,w),P.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:M})),new s.Geometry({attributes:P,indices:O,primitiveType:s.PrimitiveType.LINES,boundingSphere:e.BoundingSphere.fromEllipsoid(v),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=C}));